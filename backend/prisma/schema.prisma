generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  AGENT
  ADMIN
  MAIN_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REJECTED
}

enum VehicleCategory {
  SUV
  SEDAN
  ECONOMY
  LUXURY
  PICKUP
  VAN
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  phone           String?
  password        String
  name            String
  role            Role     @default(USER)
  isEmailVerified Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  bookings    Booking[]
  payments    Payment[]
  reviews     Review[]
  resetTokens PasswordResetToken[]
  metrics     UserMetric?

  profilePhoto  String?
  Notification  Notification[]
  SupportTicket SupportTicket[]

  @@map("users")
}

model Agent {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  bookings Booking[]    @relation("AgentBookings")
  metrics  AgentMetric?

  resetTokens  PasswordResetToken[]
  VehicleIssue VehicleIssue[]

  @@map("agents")
}

model Admin {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  role        Role     @default(ADMIN)
  isMainAdmin Boolean  @default(false)
  createdAt   DateTime @default(now())

  resetTokens   PasswordResetToken[]
  notifications Notification[]

  @@map("admins")
}

model SupportTicket {
  id         String    @id @default(uuid())
  userId     String
  subject    String
  message    String
  response   String?
  status     String    @default("OPEN") // OPEN, RESOLVED
  createdAt  DateTime  @default(now())
  resolvedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("support_tickets")
}

model Vehicle {
  id           String          @id @default(uuid())
  name         String
  description  String
  category     VehicleCategory
  pricePerDay  Float
  pricePerHour Float
  availability Boolean         @default(true)
  location     String
  transmission String
  fuelType     FuelType
  features     String[] // ["AC", "Bluetooth", "Navigation"]
  imageUrl     String?

  createdAt DateTime @default(now())

  bookings     Booking[]
  reviews      Review[]
  VehicleIssue VehicleIssue[]

  @@map("vehicles")
}

model Booking {
  id          String        @id @default(uuid())
  userId      String
  vehicleId   String
  agentId     String? // optional, assigned later
  status      BookingStatus @default(PENDING)
  pickupDate  DateTime
  dropoffDate DateTime
  totalAmount Float
  options     Json? // insurance, extra driver, etc.
  createdAt   DateTime      @default(now())

  user    User    @relation(fields: [userId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  agent   Agent?  @relation("AgentBookings", fields: [agentId], references: [id])

  payment      Payment?
  VehicleIssue VehicleIssue[]

  @@map("bookings")
}

model Payment {
  id         String   @id @default(uuid())
  userId     String
  bookingId  String   @unique
  provider   String // "Stripe", "PayPal" to be implemented later
  amount     Float
  status     String
  receiptUrl String?
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Notification {
  id        String   @id @default(uuid())
  adminId   String?
  userId    String?
  message   String
  type      String // "BOOKING_CONFIRMED", "RESET_PASSWORD".
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  admin Admin? @relation(fields: [adminId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  vehicleId String
  rating    Int      @default(5) // 1â€“5
  comment   String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])

  @@map("reviews")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String?
  adminId   String?
  agentId   String?
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user  User?  @relation(fields: [userId], references: [id])
  admin Admin? @relation(fields: [adminId], references: [id])
  agent Agent? @relation(fields: [agentId], references: [id])

  @@map("password_reset_tokens")
}

model UserMetric {
  id           String           @id @default(uuid())
  userId       String           @unique
  totalRentals Int              @default(0)
  totalSpent   Float            @default(0)
  favoriteType VehicleCategory?
  driveHours   Int              @default(0)

  user User @relation(fields: [userId], references: [id])

  @@map("user_metrics")
}

model AgentMetric {
  id               String @id @default(uuid())
  agentId          String @unique
  bookingsHandled  Int    @default(0)
  vehiclesReturned Int    @default(0)
  issuesReported   Int    @default(0)

  agent Agent @relation(fields: [agentId], references: [id])

  @@map("agent_metrics")
}

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String
  actorRole Role
  action    String // e.g. CREATE_BOOKING, DELETE_ADMIN
  target    String? // e.g. bookingId, userId
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model VehicleIssue {
  id          String   @id @default(uuid())
  agentId     String
  bookingId   String
  vehicleId   String
  description String
  status      String
  reportedAt  DateTime

  agent   Agent   @relation(fields: [agentId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])

  @@map("vehicle_issues")
}
